generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int             @id @default(autoincrement())
  lineUserId   String          @unique
  displayName  String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  progresses   Progress[]
  stats        Stat?
  logins       LoginRecord[]
  userSegments UserParagraph[]
}

model Work {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  chapters  Chapter[]
}

model Chapter {
  id            Int             @id @default(autoincrement())
  workId        Int
  title         String
  order         Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  work          Work            @relation(fields: [workId], references: [id])
  paragraphs    Paragraph[]
  progresses    Progress[]
  UserParagraph UserParagraph[]
}

model Paragraph {
  id        Int     @id @default(autoincrement())
  chapterId Int
  order     Int
  text      String
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  @@unique([chapterId, order])
}

model UserParagraph {
  id        Int     @id @default(autoincrement())
  userId    Int
  chapterId Int
  segments  Json // 使用者自訂分段
  user      User    @relation(fields: [userId], references: [id])
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  @@unique([userId, chapterId])
}

model Progress {
  id               Int      @id @default(autoincrement())
  userId           Int
  chapterId        Int
  currentParagraph Int      @default(1)
  isCompleted      Boolean  @default(false)
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])
  chapter          Chapter  @relation(fields: [chapterId], references: [id])

  @@unique([userId, chapterId])
}

model Stat {
  id                   Int  @id @default(autoincrement())
  userId               Int  @unique
  totalUsageSeconds    Int  @default(0)
  totalPracticeSeconds Int  @default(0)
  user                 User @relation(fields: [userId], references: [id])
}

model LoginRecord {
  id     Int      @id @default(autoincrement())
  userId Int
  date   DateTime
  user   User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

model UserRelation {
  id     Int @id @default(autoincrement())
  userId Int
  peerId Int
}

model ErrorReport {
  id        Int      @id @default(autoincrement())
  userId    Int?
  chapterId Int?
  paragraph Int?
  message   String
  createdAt DateTime @default(now())
}
